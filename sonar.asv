%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Simulateur de sonar à bruit                 %
%                                                            %
%       Auteurs : G.Garcia  -  @Projet-TAN-TNCY-2017         %
%                                                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Variables de la simulation %%

% Sonar
T = 0.15;          % Durée de l'onde sonore envoyée.
Te = 10;        % Durée d'écoute (finie pour la simulation) du sonar
Ps = 0.001;     % Puissance moyenne (W) du bruit blanc du sonar = carré de l'écart type Bs. 
W = 100000;     % Largeur de bande du filtre passe-bande : Fmax = f0 + W/2 => ici, W = 100000Hz car f0 = W/2 pour passe-bas
f0 = W/2;       % Fréquence centrale du filtre passe-bande
fc = W;         % Fréquence de coupure du filtre passe-bas

% Variables du bruit ambiant
DSP = 18;       % Densité Spectrale de Puissance (dB) désirée pour le bruit ambiant
FFc = W;        % Fréquence de coupure du filtre passe-bas en sortie du générateur aléatoire = celle du filtre du sonar
Pa = 0.01;      % Puissance moyenne (W) du bruit ambiant = carré de l'écart type Ba.

% Variables de l'eau de mer (calcul de la célérité du son)
Temp = 0;       % Température de l'eau de mer
S = 35;         % Salinité de l'eau de mer
z = 0;          % Profondeur du sonar

% Distances des réflecteurs au sonar (Distance max = 3000; Taille du tableau non fixée)
disref = [100, 600, 400, 1200, 2400, 2700, 1600, 2950];

% Coefficients de réflexion des réflecteurs (Valeurs = 0 à 1)
coefref = [0.3, 0.9, 0.4, 0.6, 0.2, 0.9, 0.7, 0.1];


%% Constantes de base %%
Fmax = 100000;       % Fréquence maximale des signaux sonar. Fmax = f0 + W/2 => ici, W = 100000Hz car f0 = W/2
Fe = 2.5*Fmax;       % Fréquence d'echantillonage : Théorême de Shannon
t = 0:1/Fe:T;        % Axe des temps pour le signal émis
te = 0:1/Fe:Te;      % Axe des temps pour l'écoute
dmax = 3000;         % Distance max en mètres des réflecteurs
Nr = length(disref); % Nombre de réflecteurs.
d = 1:dmax;          % Axe spatial pour les réflecteurs (pas = 1);
p = 0.016*z;         % Pression
c = 1449.2+4.6*Temp+(1.34-0.010*Temp)*(S-35)+1.58*p*10^(-6); % Vitesse du son dans l'eau
Ba = sqrt(Pa);       % Ecart type de la distribution gaussienne du bruit ambiant
Bs = sqrt(Ps);       % Ecart type de la distribution gaussienne du bruit blanc envoyé par le sonar


%% Simulation de l'environnement %%

% Création du bruit blanc
bruit_blanc = Ba*randn(1,Te*Fe+1);

% Création du filtre de réponse fréquentielle la racine carrée de DSP
[z,p,k] = butter(2, FFc/(Fe/2), 'low'); % Filtre passe-bas dans un premier temps
k = k*sqrt(DSP);
[b,a] = zp2tf(z,p,k);
%freqz(b,a)

% Filtrage
bruit_ambiant = filter(b, a, bruit_blanc);

% Affichage du bruit ambiant généré + avant filtrage
figure(1);
subplot(2,1,1)
plot(te,bruit_blanc)
title('Bruit blanc avant filtrage');
xlabel('Temps te');
ylabel('Amplitude');
axis([0,Te,-2,2]);
subplot(2,1,2)
plot(te,bruit_ambiant)
title('Bruit ambiant (post filtrage) DSP = 18');
xlabel('Temps te');
ylabel('Amplitude');
axis([0,Te,-2.0,2.0]);

%% Décor %%

% Génération des réflecteurs : Une simple somme de diracs coefficientés, pour commencer, représentera le décor.
r = 0;      % Fonction représentant les réflecteurs devant le sonar
for k=1:Nr
    tempDirac = zeros(size(d));
    tempDirac(d==disref(k)) = 1; % Dirac égal à 1 (pas infini)
    r = r + coefref(k)*tempDirac; % Création de la fonction des réflecteurs, en prenant en compte le coef de réflexion de chaque réf.
end
figure(2);
subplot(7,1,1)
plot(d,r)
title('Décor r(d)');
xlabel('Distance d');
ylabel('Coeff de réflexion r');
axis([0,dmax,0,1.0]);


%% Simulation de l'émetteur du sonar

% Création du bruit blanc gaussien constituant l'onde sonore envoyée par le sonar
bruit_blanc_sonar = Bs*randn(1,T*Fe+1);

% Fitlrage du bruit par un filtre passe-bas, dans un premier temps. Plus
% tard : se fera avec un filtre passe-bande. Creation du filtre :
[b1,a1] = butter(2, fc/(Fe/2), 'low');
%freqz(b,a)

% Filtrage du bruit blanc
onde_sonar = filter(b1, a1, bruit_blanc_sonar);

% Affichage de l'onde sonore initiale : L'amplitude de l'onde doit être
% environ 10 fois moins grande que l'amplitude du bruit ambiant. En effet,
% l'intensité de l'onde doit être très petite devant celle du bruit ambiant
% pour ne pas se faire repérer. Pour la rendre encore plus faible : baisser
% la puissance Ps.
subplot(7,1,2)
plot(t,onde_sonar)
title('Onde sonore envoyée : Ampli ~= Ampli(bruit ambiant) / 10');
xlabel('Temps t ');
ylabel('Amplitude');
axis([0,T,-0.2,0.2]);


%% Interaction entre signal sonar et environnement

fprintf("Vitesse du son : %d m/s\n", c);

% Tenir compte du PATHLOSS (affaiblissement en (1/d), omis pour l'instant
    % Ajouter la perte à l'aller onde incidente (gain dép. du temps)
    PLa = 0;
    % Ajouter la perte au retour pnde réfléchie (gain dép. du temps)
    PLr = 0;
    
% Construction des signaux réfléchis (retardés donc). t = d/c
echo = zeros(size(te));
for i=1:Nr
    retard = 2*disref(i)/c; % Compter l'aller et le retour
    echo(1,floor(retard*Fe):floor((retard+T)*Fe)) = coefref(i)*onde_sonar;
end

% Affichage de la somme des signaux réfléchis reçus
subplot(7,1,3)
plot(te,echo)
title('Signaux reçus issus de la réflexion');
xlabel('Temps te ');
ylabel('Amplitude, fonction de r');
axis([0,Te,-0.2,0.2]);


% Construction du signal reçu (écho)
    % Signal reçu = [2*PathLoss(négatif) +] Somme(r(d==point de décor)*onde_sonar) + bruit_ambiant
    onde_recu = bruit_ambiant - PLa - PLr + echo;
    
    % Affichage du signal reçu
    subplot(7,1,4)
    plot(te,onde_recu)
    title('Onde totale reçue au niveau du sonar');
    xlabel('Temps te ');
    ylabel('Amplitude');
    axis([0,Te,-2,2]);

 % Intercorrélation "simplifiée" : convolution de matlab
    % gamma(Tau) = Somme (k = 0 : 1/Fe : T) { x(k)*y(k-Tau) }
    % Tau = t - theta, écart de temps de x(t) et y(theta) deux signaux
    gamma_simpl = conv(onde_sonar, echo);

    % Affichage de l'intercorrélation
    subplot(7,1,5)
    plot(gamma_simpl)
    title('Convolution entre signal émis et signal reçu');
    xlabel('Temps');
    ylabel('Convolution');
    axis([1,2500000,-1,1]);   
    
    
% Intercorrélation 
    % Utilisation de la fonction xcorr de matlab
    gamma = xcorr(onde_sonar, echo);
tx = 1:1/Fe:2*Te+1;

    % Affichage de l'intercorrélation
    subplot(7,1,6)
    plot(tx,gamma)
    title('Intercorrélation simplifiée entre signal émis et signal reçu');
    xlabel('Temps');
    ylabel('Intercorrélation');
    %axis([1,5000000,-1,1]);
    
% Autocorrélation du signal envoyé
    % Pic de largeur très faible deant les détails de r(d)
    autocor = xcorr(onde_sonar);

    % Affichage
    subplot(7,1,7)
    plot(autocor)
    title('Autocorrélation du signal émis');
    xlabel('Temps');
    ylabel('Autocorrelation');
    axis([1,100000,-1,50]);
    
 
%% Reconstruction finale de r(d)
 
% Calcul de la distance en tenant compte de c et de dt : d = c * dt  
rbis = c * gamma_simpl/200;
 
% Affichage du résultat final
figure(3);
subplot(2,1,1)
plot(d,r)
title('Décor r(d)');
xlabel('Distance d');
ylabel('Coeff de réflexion r');
axis([0,dmax,0,1.0]);

subplot(2,1,2)
plot(rbis)
title('Reconstitution du décor');
xlabel('Distance d (unité arbitraire)');
ylabel('Réflexion reçue');
axis([1,1150000,0,10]);